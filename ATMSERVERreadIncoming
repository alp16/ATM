#/bin/bash
#
# ReadIncomingTransaction 
#        -- input is a TxId 
#        -- This is a wrapper 
#        -- just checks what command should be run
#
# It may run any of the following (mutually exclusive)
#
# DoubleOrNothing       -- input is a TxId -- returns double or nothing to the sender if the amount is being sent to BCJW4iZw7PechFHgtqqSdHmymjnFA6LjNJ OR BEtZyyYqDXqmRJJ45nnL15cuASfiXg9Yik 
# ATMSERVERsendLTCrate  -- to return the current exchange rate for LTC (in SMLY) if the message was sent from a SMLY wallet with the EXACT command
#                       -- 'sendwithmessage BLca5pTafbgH7p4ZF3ZzrPSrx6swafXAYf 10000 "get rate buy LTC from SMLY"' 
# ATMSERVERsendLTC      -- to return LTC at the current exchange rate if the message was sent with 'sendwithmessage address "buy LTC" amount' from a SMLY wallet
#                       -- using address = BLca5pTafbgH7p4ZF3ZzrPSrx6swafXAYf
#
#
# NOTE: This assumes that there is no wallet passphrase -- otherwise you need to use the wallepassphrase command before signing the transaction
#
# 15. Jan 2018
#
#------------------------------------------- ------------------------------------------- ------------------------------------------- -------------------------------------------
#
echo "------------------------------------------- ------------------------------------------- ------------------------------------------- ---------"  >> /home/gunnar/atm/log/log.0
date  >> /home/gunnar/atm/log/log.0

if [ X"$1" = X ]
then
  echo Usage $0 TxId  >> /home/gunnar/atm/log/log.0
  echo  exit >> /home/gunnar/atm/log/log.0
  exit
fi

txId=$1
BetAddress=BCJW4iZw7PechFHgtqqSdHmymjnFA6LjNJ
BetAddress2=BEtZyyYqDXqmRJJ45nnL15cuASfiXg9Yik 
echo $$ $0 The incoming TxId is $txId and my addresses are $BetAddress and $BetAddress2 >> /home/gunnar/atm/log/log.0
#
# Step 0: Minimal logging
repeat=`grep $txId /home/gunnar/atm/log/logtxid`
if [ X"$repeat" != X ]
then
  echo $$ $0 duplicate transaction "$txId"  >> /home/gunnar/atm/log/log.0
  echo  exit >> /home/gunnar/atm/log/log.0
  exit
fi

echo $txId >> /home/gunnar/atm/log/logtxid
echo "$$ $0 Incoming transaction $txId" >> /home/gunnar/atm/log/log.0

#
# Step 0: Omit the coinbase transactions (dividends etc)
#
generated=`smileycoin-cli  gettransaction $txId|grep generated|wc -l`
if [ X"$generated" != X0 ]
then
  echo "$$ $0 Transaction $txId is a coinbase transaction" >> /home/gunnar/atm/log/log.0
  echo exit >> /home/gunnar/atm/log/log.0
  exit
fi

#
# Step 1: Extract some basics for the incoming transaction 
#
echo "$$ $0 Continuing with transaction $txId" >> /home/gunnar/atm/log/log.0
tx=`smileycoin-cli  getrawtransaction $txId`
isBet=`smileycoin-cli  decoderawtransaction $tx | awk '/value/{value=$3}
{if(printnext==1){print $0, value;printnext=0}}
/addresses/{printnext=1} '|egrep "$BetAddress|$BetAddress2"| sed -e 's/.*"//' -e 's/[ ",]*//g' -e 's/\..*//'`
isMessage=`smileycoin-cli  gettransaction $txId|egrep '100.31415926'|wc -l`
isToUs=`smileycoin-cli  gettransaction $txId|egrep 'BLca5pTafbgH7p4ZF3ZzrPSrx6swafXAYf'|wc -l`

#
# Step 3: Figure out what this is
#
echo "$$ $0 Evaluating whether $txId is a bet: ->$bet<-"  >> /home/gunnar/atm/log/log.0
if [ X"$isBet" != X ]
then
  echo "$$ $0 Transaction $txId is a nonzero bet"  >> /home/gunnar/atm/log/log.0
  echo  "$$ $0 Fire up game and exit" >> /home/gunnar/atm/log/log.0
  ($HOME/atm/ATMDoubleOrNothing $txId 2>&1 >> /home/gunnar/atm/log/log.0)&
  exit
fi
#

if [ X"$isMessage" != X0 ]
then
  message=`/home/gunnar/atm/ATMSERVERpickupMessage $txId|sed 's/ *$//'`
  echo "$$ $0 Transaction $txId is a message: ->$message<- isToUs: ->$isToUs<-"  >> /home/gunnar/atm/log/log.0
  value=`/home/gunnar/atm/ATMSERVERpickupValue $txId`
  echo "$$ $0 Found the total value behind the message: ->$value<-" >> /home/gunnar/atm/log/log.0  # use this to verify appropriate amounts etc
  if [ X"$isToUs" != X0 ]
  then
    echo "$$ $0 Transaction $txId is a message to us"  >> /home/gunnar/atm/log/log.0
    echo  "$$ $0 Fire up ATMSERVERpickupRate to prepare ourselves" >> /home/gunnar/atm/log/log.0
    LTCrate=`/home/gunnar/atm/ATMSERVERpickupRate`
    echo "$$ $0 Read the message and start up something"  >> /home/gunnar/atm/log/log.0
    if [ X"$message" = X"get rate buy LTC from SMLY" ]
    then
      echo "$$ $0 This is a request for an exchange rate"  >> /home/gunnar/atm/log/log.0
      response=`echo "1 LTC=$LTCrate SMLY"`
      echo "$$ $0 Response: $LTCrate">> /home/gunnar/atm/log/log.0
      recipient=`/home/gunnar/atm/ATMSERVERgetReturnAddress $txId`
      if [ "$recipient" = "ERROR" ]
      then 
        echo "$$ $0 Could not find a valid recipient address" >> /home/gunnar/atm/log/log.0
        exit
      fi
      if [ $value -ge 1000 ]
      then
        echo $$ $0 Running: smileycoin-cli  sendwithmessage $recipient 750 "$response"  >> /home/gunnar/atm/log/log.0
        smileycoin-cli  sendwithmessage $recipient 750 "$response"  >> /home/gunnar/atm/log/log.0
      else
        echo "$$ $0 ERROR: Value too low to justify returning the rate" >> /home/gunnar/atm/log/log.0
      fi
      exit
    fi
    # Try to extract a LTC address etc from the message: Should simply be "Buy LTC ltcAddress" and then the value
    set - $message
    if [ X"$1 $2" = X"Buy LTC" ]
    then 
       recipient="$3"  # recipient is a LTC address
       SMLYvalue=$value
       echo "$$ $0 We have a request to buy LTC for $value SMLY - so verify the address" >> /home/gunnar/atm/log/log.0
       ans=`litecoin-cli  validateaddress "$recipient" |grep isvalid|grep true|wc -l`
       echo -n 3 >> /home/gunnar/atm/log/log.0
       if [ "$ans" != 1 ]
       then
         echo "$$ $0 ERROR - ->$recipient<- is not a valid LTC address" >> /home/gunnar/atm/log/log.0
         echo "$$ $0 Got ->$ans<- and should have gotten ->1<-" >> /home/gunnar/atm/log/log.0
         exit 0
       fi
       # We have a valid request for LTC 
       echo "$$ $0 adding nonlinearity" >> /home/gunnar/atm/log/log.0
       SMLYstash=`smileycoin-cli getbalance`
       LTCstash=`litecoin-cli getbalance`
       # don't exceed the stash
       if [ $value -gt $SMLYstash ]
       then
         newLTCrate=`echo "$LTCrate / 1000"|bc`
       else
         newLTCrate=`echo " $LTCrate * ( 1- $SMLYvalue / $SMLYstash  )"|bc`
       fi
       echo "$$ $0 proposed new rate $newLTCrate" >> /home/gunnar/atm/log/log.0
       

       echo "$$ $0 computing "valueLTC echo scale=8;0.9*$SMLYvalue / $LTCrate" >> /home/gunnar/atm/log/log.0
       valueLTC=`echo "scale=8;x=0.9*$SMLYvalue / $LTCrate;if(x<1) print 0; x"|bc` # createrawtransaction needs 0., not just .
       # don't exceed the stash
       if [ $valueLTC -gt $LTCstash ]
       then
         valueLTC=`echo "$LTCstash*0.01"| bc` 
       fi
       echo "$$ $0 Starting up a transfer of ->$valueLTC<- LTC for ->$SMLYvalue<- SMLY"  >> /home/gunnar/atm/log/log.0
       
       echo $$ litecoin-cli  sendtoaddress $recipient $valueLTC >> /home/gunnar/atm/log/log.0
       output=`(litecoin-cli  sendtoaddress $recipient $valueLTC 2>&1)`
       echo "$$ $0 LTC transaction specified in $txId gave output ->$output<-" >> /home/gunnar/atm/log/log.0
       echo  "$$ $0 normal exit -  for $txId end"  >> /home/gunnar/atm/log/log.0
       exit
    fi
    set - $message
    if [ X"$1 $2 $3 $4" = X"Send LTC SMLY addresses" ]
    then
      recipientLTC="$5"
      if [ $value -ge 4000 ]
      then
        echo "$$ $0 we have a request for addresses" >> /home/gunnar/atm/log/log.0
        recipientSMLY=`/home/gunnar/atm/ATMSERVERgetReturnAddress $txId` # recipient is a SMLY address
        atmSMLY=`smileycoin-cli getnewaddress`                      # send them a SMLY deposit address
        atmLTC=`litecoin-cli getnewaddress`                        # send them a LTC deposit address
        echo "$$ $0 Running:" smileycoin-cli  sendwithmessage $recipientSMLY 3500 "deposit address, LTC: $atmLTC and SMLY: $atmSMLY"   >> /home/gunnar/atm/log/log.0
        output=`(smileycoin-cli  sendwithmessage $recipientSMLY 3500 "deposit address, LTC: $atmLTC and SMLY: $atmSMLY" 2>&1)`
        echo "$$ $0 with output ->$output<-" >> /home/gunnar/atm/log/log.0
        echo "$atmLTC $recipientSMLY" >> /home/gunnar/atm/db/ltc.smly.db # convert LTC to SMLY -- needs to stay sorted
        echo "$atmSMLY $recipientLTC" >> /home/gunnar/atm/db/smly.ltc.db # convert SMLY to LTC  -- needs to stay sorted
        cp /home/gunnar/atm/db/ltc.smly.db /home/gunnar/atm/db/ltc.smly.db.bak
        cp /home/gunnar/atm/db/smly.ltc.db /home/gunnar/atm/db/smly.ltc.db.bak
        sort /home/gunnar/atm/db/ltc.smly.db -o /home/gunnar/atm/db/ltc.smly.db
        sort /home/gunnar/atm/db/smly.ltc.db -o /home/gunnar/atm/db/smly.ltc.db
        echo "$$ $0 normal exit -  for $txId end"  >> /home/gunnar/atm/log/log.0
        exit
      else
        echo "ERROR: Value too low to justify returning the rate" >> /home/gunnar/atm/log/log.0
      fi
    fi
    echo "$0 ERROR: Message does not correspond to a request"  >> /home/gunnar/atm/log/log.0
  fi
  echo "----------------------------------------------------" >> /home/gunnar/atm/log/log.0
  exit
fi
# Now, check to see whether this is a deposit to an existing SMLY ATM. All of those are stored in the database.
atmSMLY=`smileycoin-cli  gettransaction $txId |grep '"address"'|head -1|sed -e 's/.*: *//' -e 's/[",]*//g'` # WARNING: we only use the first address sendwithmessage will bomb here!!
value=`/home/gunnar/atm/ATMSERVERpickupValue $txId $atmSMLY`
set - `grep $atmSMLY /home/gunnar/atm/db/smly.ltc.db|tail -1`  # see whether the SMLY address is a personalised ATM
if [ "X$1" != "X" -a "X$2" != "X" ] # might be
then
  LTCrate=`/home/gunnar/atm/ATMSERVERpickupRate` 
  userLTC=$2
  echo "$$ $0 SMLY address $atmSMLY is a personalised ATM request with value $value SMLY for destination ->$userLTC<-" >> /home/gunnar/atm/log/log.0
  echo "$$ $0 starting up ATMSERVERsendLTC" "$value" "$userLTC"  "$LTCrate" >> /home/gunnar/atm/log/log.0
  output=`(/home/gunnar/atm/ATMSERVERsendLTC "$value" "$userLTC"  "$LTCrate" 2>&1)`
  echo $output >> /home/gunnar/atm/log/log.0
  echo "----------------------------------------------------" >> /home/gunnar/atm/log/log.0
  exit
fi
echo "----------------------------------------------------" >> /home/gunnar/atm/log/log.0
echo "$$ $0 ERROR: WE ARE IN THE WRONG PLACE with $txId" >> /home/gunnar/atm/log/log.0
echo "----------------------------------------------------" >> /home/gunnar/atm/log/log.0

# should never get here
exit
